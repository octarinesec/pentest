package testers

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/go-sql-driver/mysql"
	"io/ioutil"
	"log"
	"pentest/engine"
	"time"
)

import _ "github.com/go-sql-driver/mysql"

type MysqlTester struct{}

func GenerateMysqlDSNWithCreds(target engine.Target, timeout time.Duration, creds engine.Credentials) string {
	url := ""
	if creds.Username != "" {
		url += creds.Username
		if creds.Password != "" {
			url += ":" + creds.Password
		}
		url += "@"
	}
	url += fmt.Sprintf("tcp(%s:%d)/?timeout=%v&writeTimeout=%v&readTimeout=%v", target.IP, target.Port,
		timeout, timeout, timeout)
	return url
}

func GenerateMysqlDSN(target engine.Target, timeout time.Duration) string {
	return GenerateMysqlDSNWithCreds(target, timeout, engine.Credentials{})
}

func CheckMysql(dsn string) bool {
	db, err := sql.Open("mysql", dsn)

	if err != nil {
		engine.Logger.Errorf("Shouldn't happen.")
		return false
	}
	defer db.Close()

	conn, err := db.Conn(context.Background())
	if err != nil {
		return false
	}
	defer conn.Close()

	return true
}

func (tester MysqlTester) Test(target engine.Target) {
	timeout := 50 * time.Millisecond

	if CheckMysql(GenerateMysqlDSN(target, timeout)) {
		engine.AddTestResult(tester, target, "Default credentials")

		engine.Logger.Infof("Mysql: Default credentials open!\n")
		return
	}

	for creds := range engine.GenerateCredentials() {
		engine.Logger.Infof("MySQL: Trying using %s:%s\n", creds.Username, creds.Password)
		if CheckMysql(GenerateMysqlDSNWithCreds(target, timeout, creds)) {
			engine.AddTestResult(tester, target, creds)

			engine.Logger.Infof("Mysql: Connected!")
			return
		}
	}
}

func init() {
	// Disable mysql info logs
	mysqlLog := log.New(ioutil.Discard, "", 0)
	mysql.SetLogger(mysqlLog)

	engine.Logger.Debugf("Adding Mysql Tester")
	engine.AddTester(MysqlTester{})
}
