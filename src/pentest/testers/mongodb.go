package testers

import (
	"fmt"
	"github.com/globalsign/mgo"
	"log"
	"pentest/engine"
	"time"
)

type MongoDBTester struct {}

func GenerateMongoURIWithCreds(target engine.Target, creds engine.Credential) string {
	url := "mongodb://"
	if creds.Username != "" {
		url += creds.Username
		if creds.Password != "" {
			url += ":" + creds.Password
		}
		url += "@"
	}
	url += fmt.Sprintf("%s:%d", target.IP, target.Port)
	return url
}

func GenerateMongoURI(target engine.Target) string {
	return GenerateMongoURIWithCreds(target, engine.Credential{})
}

func CheckMongoDB(uri string) bool {
	session, err := mgo.DialWithTimeout(uri, 50 * time.Millisecond)
	if err != nil {
		return false
	}

	session.Close()
	return true
}

func (MongoDBTester) Test(target engine.Target) {
	if CheckMongoDB(GenerateMongoURI(target)) {
		log.Printf("MongoDB: Default credentials open!\n")
		return
	}

	for creds := range engine.GenerateCredentials() {
		log.Printf("MongoDB: Trying using %s:%s\n", creds.Username, creds.Password)
		if CheckMongoDB(GenerateMongoURIWithCreds(target, creds)) {
			log.Printf("MongoDB: Connected!")
			return
		}
	}
}

func init () {
	log.Println("Loading MongoDB Tester")

	engine.AddTester(MongoDBTester{})
}

