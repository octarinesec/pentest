package engine

import (
	"fmt"
	"net"
)

type Target struct {
	IP 		net.IP
	Port 	uint16
}

type Targets struct {
	ips		[]net.IP
	ports	[]uint16
}

var targets Targets

func AddIP(ip string) {
	converted := net.ParseIP(ip)

	for _, ip := range targets.ips {
		if ip.Equal(converted) {
			return
		}
	}

	fmt.Printf("Collecting ip: %v\n", ip)
	targets.ips = append(targets.ips, net.ParseIP(ip))
}

func AddPort(port uint16) {
	for _, exists := range targets.ports {
		if exists == port {
			return
		}
	}

	fmt.Printf("Collecting port: %v\n", port)
	targets.ports = append(targets.ports, port)
}

func GenerateTarget() <- chan Target {
	ch := make(chan Target)
	go func () {
		for _, ip := range targets.ips {
			for _, port := range targets.ports {
				ch <- Target{ip, port}
			}
		}
		close(ch)
	} ()
	return ch
}
