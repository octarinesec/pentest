package engine

import (
	"fmt"
	"github.com/juju/ansiterm"
	"github.com/juju/loggo"
	"io"
	"os"
	"time"
)

var (
	// SeverityColor defines the colors for the levels output by the ColorWriter.
	SeverityColor = map[loggo.Level]*ansiterm.Context{
		loggo.TRACE:   ansiterm.Foreground(ansiterm.Default),
		loggo.DEBUG:   ansiterm.Foreground(ansiterm.Green),
		loggo.INFO:    ansiterm.Foreground(ansiterm.BrightBlue),
		loggo.WARNING: ansiterm.Foreground(ansiterm.Yellow),
		loggo.ERROR:   ansiterm.Foreground(ansiterm.BrightRed),
		loggo.CRITICAL: &ansiterm.Context{
			Foreground: ansiterm.White,
			Background: ansiterm.Red,
		},
	}
	// LocationColor defines the colors for the location output by the ColorWriter.
	LocationColor = ansiterm.Foreground(ansiterm.BrightBlue)
)

type colorWriter struct {
	writer *ansiterm.Writer
}

// Writer will write out colored severity levels if the writer is
// outputting to a terminal.
func NewWriter(writer io.Writer) loggo.Writer {
	return &colorWriter{ansiterm.NewWriter(writer)}
}

// Write implements Writer.
func (w *colorWriter) Write(entry loggo.Entry) {
	SeverityColor[entry.Level].Fprintf(w.writer, "[%s] %s\n", entry.Level, entry.Message)
	//fmt.Fprintln(w.writer, entry.Message)
}

var context = loggo.NewContext(loggo.TRACE)

func GetLogger(name string) loggo.Logger {
	return context.GetLogger(name)
}

var Logger = GetLogger("pentest")

func init() {
	defaultWriter := loggo.NewMinimumLevelWriter(NewWriter(os.Stderr), loggo.INFO)
	context.AddWriter("default", defaultWriter)

	file, err := os.OpenFile("pentest.log", os.O_RDWR|os.O_APPEND|os.O_CREATE, 0660)
	if err != nil {
		panic(fmt.Sprintf("Couldn't create log file: %v", err))
	}

	context.AddWriter("FileWriter", loggo.NewSimpleWriter(file, nil))

	Logger.Tracef("=== Started logging - %s ===", time.Now().Format("2006-01-02-15-04-05"))
}
