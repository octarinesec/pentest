package engine

import (
	log "github.com/sirupsen/logrus"
)

type Credential struct {
	Username string
	Password string
}

type Credentials struct {
	usernames []string
	passwords []string
}

var credentials Credentials

func AddPassword(password string) {
	for _, exists := range credentials.passwords {
		if exists == password {
			return
		}
	}

	log.Printf("Collecting password: %v\n", password)
	credentials.passwords = append(credentials.passwords, password)
}

func AddUsername(username string) {
	for _, exists := range credentials.usernames {
		if exists == username {
			return
		}
	}

	log.Printf("Collecting username: %v\n", username)
	credentials.usernames = append(credentials.usernames, username)
}

func GenerateCredentials() <-chan Credential {
	ch := make(chan Credential)
	go func() {
		for _, username := range credentials.usernames {
			for _, password := range credentials.passwords {
				ch <- Credential{username, password}
			}
		}
		close(ch)
	}()
	return ch
}

func init() {

}
