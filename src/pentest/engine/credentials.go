package engine

type Credentials struct {
	Username string
	Password string
}

var usernames []OriginString
var passwords []OriginString

func AddPassword(password string, origin interface{}) {
	for _, exists := range passwords {
		if exists.string == password {
			return
		}
	}

	Logger.Debugf("Collecting password: %v\n", password)
	passwords = append(passwords, OriginString{Origin{origin}, password})
}

func AddUsername(username string, origin interface{}) {
	for _, exists := range usernames {
		if exists.string == username {
			return
		}
	}

	Logger.Debugf("Collecting username: %v\n", username)
	usernames = append(usernames, OriginString{Origin{origin}, username})
}

func GetUsernamesByOrigin(origin interface{}) []string {
	var res []string
	for _, username := range usernames {
		if username.Origin.Origin == origin {
			res = append(res, username.string)
		}
	}
	return res
}

func GetPasswordsByOrigin(origin interface{}) []string {
	var res []string
	for _, password := range passwords {
		if password.Origin.Origin == origin {
			res = append(res, password.string)
		}
	}
	return res
}

func GenerateCredentials() <-chan Credentials {
	ch := make(chan Credentials)
	go func() {
		for _, username := range usernames {
			for _, password := range passwords {
				ch <- Credentials{username.string, password.string}
			}
		}
		close(ch)
	}()
	return ch
}

func init() {

}
