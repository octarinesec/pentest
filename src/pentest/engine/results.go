package engine

import (
	"encoding/json"
	"fmt"
	"sync"
)

type TestTargetResult struct {
	Target Target      `json:"target"`
	Data   interface{} `json:"data"`
}

type ResultTarget map[string][]uint16
type TestResult map[string][]TestTargetResult

type Results struct {
	sync.RWMutex
	Targets     ResultTarget `json:"targets"`
	Credentials []Credentials `json:"credentials"`
	Testers     TestResult   `json:"testers"`
}

var results Results

func AddResultTarget(target Target) {
	results.Lock()
	defer results.Unlock()

	results.Targets[target.IP] = append(results.Targets[target.IP], target.Port)
}

func AddResultCredentials(creds Credentials) {
	results.Lock()
	defer results.Unlock()

	results.Credentials = append(results.Credentials, creds)
}

func AddTestResult(tester Tester, target Target, data interface{}) {
	results.Lock()
	defer results.Unlock()

	testerName := fmt.Sprintf("%T", tester)
	results.Testers[testerName] = append(results.Testers[testerName], TestTargetResult{target, data})
}

func summaryTarget() {
	Logger.Infof("Found open services:")
	for ip, ports := range results.Targets {
		Logger.Infof("    %v: %v", ip, ports)
	}
}

func summaryCredentials() {
	Logger.Infof("Found credentials:")
	for _, creds := range results.Credentials {
		Logger.Infof("    %v:%v", creds.Username, creds.Password)
	}
}

func summaryTesters() {
	Logger.Infof("Found vulnerable services:")
	for tester, results := range results.Testers {
		Logger.Infof("    %v:", tester)
		if len(results) > 0 {
			for _, result := range results {
				Logger.Infof("        %s using %v", result.Target, result.Data)
			}
		}
	}
}

func PrintSummary() {
	Logger.Infof("Summary:")

	summaryTarget()
	summaryCredentials()
	summaryTesters()
}

func MarshallResult() string {
	results.RLock()
	defer results.RUnlock()

	res, _ := json.MarshalIndent(results, "", "    ")
	return string(res)
}

func init() {
	results.Targets = make(ResultTarget)
	results.Testers = make(TestResult)
}
