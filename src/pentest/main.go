package main

import (
	"pentest/engine"
	"sync"
)

import _ "pentest/extractors"
import _ "pentest/testers"

func testOnTarget(jobid int, target engine.Target) {
	for _, tester := range engine.GetTesters() {
		engine.Logger.Infof("[%v] Testing using %T on target %v\n", jobid, tester, target)
		tester.Test(target)
	}
}

func testOnTargets(wg *sync.WaitGroup, jobid int, generator <-chan engine.Target) {
	defer wg.Done()
	engine.Logger.Infof("[%d] Started", jobid)
	for target := range generator {
		testOnTarget(jobid, target)
	}
}

func testOnAllTargets(jobs int) {
	engine.Logger.Infof("Starting %d workers...", jobs)

	generator := engine.GenerateTarget()

	var wg sync.WaitGroup

	wg.Add(jobs)
	for i := 0; i < jobs; i++ {
		go testOnTargets(&wg, i, generator)
	}

	wg.Wait()
}

func saveCollected() {
	for target := range engine.GenerateTarget() {
		engine.AddResultTarget(target)
	}
	for cred := range engine.GenerateCredentials() {
		engine.AddResultCredentials(cred)
	}
}

func main() {
	// TODO: Add interactive flags

	engine.Logger.Infof("Phase 1 - Extracting cloud data")

	for _, extractor := range engine.GetExtractors() {
		engine.Logger.Infof("Collecting using %T...\n", extractor)
		extractor.Extract()
	}

	engine.Logger.Infof("Phase 1 - Done. Summary:")
	for _, extractor := range engine.GetExtractors() {
		extractor.Summary()
	}
	saveCollected()

	engine.Logger.Infof("Phase 2 - Testing on targets")

	testOnAllTargets(4)

	engine.Logger.Infof("Phase 2 - Done")

	engine.PrintSummary()

	// TODO: save results to result file
	//fmt.Println(engine.MarshallResult())

	engine.Logger.Infof("Done.")
}
