package main

import (
	"fmt"
	"pentest/engine"
	"sync"
)

import _ "pentest/extractors"
import _ "pentest/testers"

func testOnTarget(target engine.Target) {
	fmt.Printf("Target: %v\n", target)
	for _, tester := range engine.GetTesters() {
		fmt.Printf("Testing using %T on target %v\n", tester, target)
		tester.Test(target)
	}
}

func testOnTargets(wg *sync.WaitGroup, generator <-chan engine.Target) {
	defer wg.Done()
	for target := range generator {
		testOnTarget(target)
	}
}

func testOnAllTargets(jobs int) {
	fmt.Println("Testing on all collected targets")

	generator := engine.GenerateTarget()

	var wg sync.WaitGroup

	wg.Add(jobs)
	for i := 0; i < jobs; i++ {
		go testOnTargets(&wg, generator)
	}

	wg.Wait()
}

func main() {
	fmt.Println("Gathering testers and extractors")

	for _, extractor := range engine.GetExtractors() {
		fmt.Printf("Extarcting using %T...\n", extractor)
		extractor.Extract()
	}

	testOnAllTargets(2)
}
