package cmd

import (
	"github.com/spf13/cobra"
	"os"
	"pentest/engine"
	"sync"
)

var runCmd = &cobra.Command{
	Use:   "run",
	Short: "Start penetration testing environment",
	Long:  `This command starts the penetration testing in the current environment`,
	Run: func(cmd *cobra.Command, args []string) {
		fullTest()
	},
}

var numWorkers int
var extractOnly bool
var resultFilePath string

func testOnTarget(workerid int, target engine.Target) {
	for _, tester := range engine.GetTesters() {
		engine.Logger.Infof("[%v] Testing using %T on target %v\n", workerid, tester, target)
		tester.Test(target)
	}
}

func testOnTargets(wg *sync.WaitGroup, workerid int, generator <-chan engine.Target) {
	defer wg.Done()
	engine.Logger.Infof("[%d] Started", workerid)
	for target := range generator {
		testOnTarget(workerid, target)
	}
}

func testOnAllTargets(workers int) {
	engine.Logger.Infof("Starting %d workers...", workers)

	generator := engine.GenerateTarget()

	var wg sync.WaitGroup

	wg.Add(workers)
	for i := 0; i < workers; i++ {
		go testOnTargets(&wg, i, generator)
	}

	wg.Wait()
}

func saveCollected() {
	for target := range engine.GenerateTarget() {
		engine.AddResultTarget(target)
	}
	for cred := range engine.GenerateCredentials() {
		engine.AddResultCredentials(cred)
	}
}

func extractFromAll() {
	for _, extractor := range engine.GetExtractors() {
		engine.Logger.Infof("Collecting using %T...\n", extractor)
		extractor.Extract()
	}
}

func extractorsSummary() {
	for _, extractor := range engine.GetExtractors() {
		extractor.Summary()
	}
}

func saveResults() {
	file, err := os.Create(resultFilePath)
	if err != nil {
		engine.Logger.Errorf("Couldn't open file %s for writing result: %s", resultFilePath, err)
		return
	}
	defer file.Close()

	file.WriteString(engine.MarshallResult())
}

func fullTest() {
	engine.Logger.Infof("Phase 1 - Extracting cluster data")

	extractFromAll()

	engine.Logger.Infof("Phase 1 - Done. Summary:")
	extractorsSummary()

	engine.Logger.Infof("Phase 2 - Ensure reachable targets")

	// Can use large number of workers because most of the idle time is waiting for i/o
	engine.CheckTargets(numWorkers)
	saveCollected()

	if !extractOnly {
		engine.Logger.Infof("Phase 2 - Done.")

		engine.Logger.Infof("Phase 3 - Testing on targets")

		testOnAllTargets(numWorkers)

		engine.Logger.Infof("Phase 3 - Done")
	}

	engine.PrintSummary()

	engine.Logger.Infof("Saving results to file.")
	saveResults()

	engine.Logger.Infof("Done.")
}

func init() {
	runCmd.PersistentFlags().StringVar(&resultFilePath, "results-file", "results.json",
		"Output result file path.")

	runCmd.PersistentFlags().IntVar(&numWorkers, "workers", 10,
		"Number of workers for concurrent testing.")

	runCmd.PersistentFlags().BoolVar(&extractOnly, "extract-only", false,
		"Only execute the first stage. Extract cluster data only.")

	RootCmd.AddCommand(runCmd)
}