package cmd

import (
	"github.com/spf13/cobra"
	"os"
	"pentest/engine"
	"pentest/extractors"
	"pentest/kube"
	"pentest/testers"
)

var runCmd = &cobra.Command{
	Use:   "run",
	Short: "Start penetration testing environment",
	Long:  `This command starts the penetration testing in the current environment`,
	Run: func(cmd *cobra.Command, args []string) {
		fullTest()
	},
}

var numWorkers int
var extractOnly bool
var resultFilePath string

func saveResults() {
	file, err := os.Create(resultFilePath)
	if err != nil {
		engine.Logger.Errorf("Couldn't open file %s for writing result: %s", resultFilePath, err)
		return
	}
	defer file.Close()

	file.WriteString(engine.MarshallResult())
}

func fullTest() {
	engine.Logger.Infof("Phase 1 - Check if Kubernetes is RBAC mis-configured")
	engine.SetRBACVulnerable(kube.IsKubernetesClusterAccessible())
	engine.Logger.Infof("Phase 1 - Done.")

	engine.Logger.Infof("Phase 2 - Extracting cluster data.")
	extractors.ExtractFromAll()
	engine.Logger.Infof("Phase 2 - Done. Summary:")
	extractors.ExtractorsSummary()

	engine.Logger.Infof("Phase 3 - Ensure reachable targets")

	// Can use large number of workers because most of the idle time is waiting for i/o
	engine.CheckTargets(numWorkers)
	extractors.SaveCollected()

	engine.Logger.Infof("Phase 3 - Done.")

	if !extractOnly {
		engine.Logger.Infof("Phase 4 - Testing on targets")

		testers.TestOnAllTargets(numWorkers)

		engine.Logger.Infof("Phase 4 - Done")
	}

	engine.PrintSummary()

	engine.Logger.Infof("Saving results to file.")
	saveResults()

	engine.Logger.Infof("Done.")
}

func init() {
	runCmd.PersistentFlags().StringVar(&resultFilePath, "results-file", "results.json",
		"Output result file path.")

	runCmd.PersistentFlags().IntVar(&numWorkers, "workers", 10,
		"Number of workers for concurrent testing.")

	runCmd.PersistentFlags().BoolVar(&extractOnly, "extract-only", false,
		"Only execute the first stage. Extract cluster data only.")

	RootCmd.AddCommand(runCmd)
}